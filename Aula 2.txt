class Main
{
	public static void main(String[] args)
	{
		System.out.println("Hello World!");
	}
}

String[] args = argumentos para rodar o programa por linha de comando.

=========Nome da classe precisa ser o mesmo nome que o do arquivo

Só pode ter uma classe por arquivo, limitante.

Projeto .xml = tecnologia para trabalhar com pacotes, com o mavim, automatiza o projeto. Várias dependencias, pode ser por isso que demora para rodar o código. Arquivo de configuração do projeto.

Target .jar = texto do código fonte, mavim já baixa isso para você

Java.lang é um dos pacotes, por padrão já vem instalado, não precisa fazer import.
- System
 - out
  - println

Para ler dados do usuário: 
- java.util

====CODIGO
import java.util.Scanner;
class Main
{
	public static void main(String[] args)
	{
		//leitura de dados do usuário:
		Scanner sc = new Scanner(System.in);
		//print no monitor:
		System.out.println("Hello World!");
		int n = sc.nextInt();
	}
}

Bom usar o scanner segundo o docs.oracle onde tem a documentação.

import java.util.Scanner;
class Main
{
	public static void main(String[] args)
	{
		//leitura de dados do usuário:
		Scanner sc = new Scanner(System.in);
		//print no monitor:
		int n = sc.nextInt();
		System.out.println(2 * n);
	}
}

import java.util.Scanner;
import java.util.Random;
class Main
{
	public static void main(String[] args)
	{
		//diferença no tamanho
		byte b; // - 8 bits -> 2^8=256(-127 a 128)
		short s;//16  bits -> 2^16=65k(-32k a 32k)
		int i;//32  bits -> 2^32=4kk (-2kk a 2kk)
		long i;//64  bits -> 2^64=16*10^18

		float f; //32 bits
		double d; //64 bits
		
		char c;
		
		//leitura de dados do usuário:
		Scanner sc = new Scanner(System.in);
		//print no monitor:
		int n = sc.nextInt();
		
		System.out.println(2 * n);
		sc.close();
	}
}

Explicação do ponto flutuante(float):
1.74
174 * 10^-2

por causa disso temos pouca precisão usando float na programação.

Float pra ter precisão, dados cientifícos. Double quando tiver números muito pequenos.

Dentro do java.lang mais comum utilizar Integer n = sc.nextInt();

Integer é uma classe, encapsula o int, Long, os dados vão para o heap
String s = "Hello World!";
Boolean b = true;

Mais comum utilizar as Classes para declarar, pois tem funções inclusas.

import java.util.Scanner;
import java.util.Random;
class Main
{
	public static void main(String[] args)
	{
		//Byte b = null;//None

		//Byte vs byte
		//Byte b = 100;
		//byte b2 = b;
		
		//criando um vetor de 256 posições
		byte[] bytes = new byte[256]; 
		
		Integer[] myInts = new Integer[100];
		
		Scanner[] sacnners = new Scanner[100];

		var rand = new Random();
		rand.nextBytes();

		int k = 0;
		
		while(k < bytes.length)
		{
			System.out.println(bytes[k]);
			k++;
		}

		if (bytes[0] == 128)
		{
			System.out.println("Olá");
		}

		for (int i =0; i < bytes.length; i++)
		{
			System.out.println(bytes[i])
		}
			
		var sc = new Scanner(System.in);
		var n = sc.nextInt();
		
		System.out.println(2 * n);
		sc.close();
	}
	static void mostrarTodos
	{
		
	}
}

setSeed = com a mesma semente, sempre vou gerar os mesmos números.

import java.util.Scanner;
import java.util.Random;
class Main
{
	public static void main(String[] args)
	{
		byte[] bytes = new byte[256]; 
		
		var rand = new Random();
		rand.nextBytes();

		int k = 0;
		
		int a = 1000;
		int b = 1000;


		Integer A = 1000;
		A.intValue();
		Integer B = 1000;

		if (a==b) 
		{
			System.out.println("Olá");
		}

		if(A==B) //compara endereços
		{
			System.out.println("Olá");
		}

		mostrarTodos();
	
		while(k < bytes.length)
		{
			System.out.println(bytes[k]);
			k++;
		}

		if (bytes[0] == 128)
		{
			System.out.println("Olá");
		}

		var sc = new Scanner(System.in);
		var n = sc.nextInt();
		
		System.out.println(2 * n);
		sc.close();
	}
	static void mostrarTodos(byte[] bytes)
	{
		
		for (int i =0; i < bytes.length; i++)
		{
			System.out.println(bytes[i])
		}
				
	}

	static void escovandoBits(byte a, byte b)
	{
		byte s = 0b01010101; //0b indica que é um binário
		byte h = 0xFF;

		//Shift:
		// 11110000 << 4 = 00000000
		// 00001111 << 4 = 11110000
		// 00111100 >> 4 = 00000011
		// 10000000 >> 2 = 11100000 >> É COM SINAL
		// 10000000 >>> 3 = 00100000 
		
		var x1 = a & b; //& = and
		var x2 = a | b;
		var x3 = a ^ b; bits != true, bits == falso
		var x4 = a <<b;
		var x5 = a>>b;
		var x6 = a << 4;
		var x7 = -a;

	}
}

NUNCA FAZER COMPARAÇÃO DE STRINGS ASSIM: 
if(A==B) //compara endereços
{
	System.out.println("Olá");
}

>>>>>>>>>o correto é fazer:
if(A.compareTo(B) == 0) //compara endereços
{
	System.out.println("Olá");
}

Todas as classes herdam no java de object, ou seja, todas as funções do Object tem.


Diferença de colocar & e &&:
&: considera sempre os dois lados
&&: circuito curto, se o primeiro for verdadeiro ele não precisa comparar o segundo.

If: dois símbolos
Operação binária: um símbolo

Pode gerar os bytes aleatorios, comprimir e descomprimir

static byte[] comprimir(short[] bytes)
{

}

static byte[] descomprimir(short[] bytes)
{

}

vamos receber dois numeros, pegar os numeros mais significativos e juntar com os numeros mais significativos de outro byte

descomprimir, pegar aquele um byte de dado, separar em duas partes, e adicionar zeros nas casas menos significativas, para ter dois bytes de volta.
