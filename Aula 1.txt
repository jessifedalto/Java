--------Tipagem: é um estudo sobre como as linguagens definem tipos, como se fosse um plano cartesiano, dois eixos. Eixo x negativo = tipagem fraca, eixo x positivo = tipagem forte
Eixo y positivo = tipagem dinâmica, eixo y negativo = tipagem estática.

>>>>>>>>Estática e dinâmica<<<<<<<<<<
programa que você tá usando, as váriaveis tem tipo? Se sim, é estática;
//Python é uma linguagem dinâmica, pois não precisa declarar um tipo: i = 0, c = 'a'

//C estático
int i = 0 
char c = 'a'

//C# identifica o tipo da váriavel por baixo dos panos, estático
var i = 0;
var c - 'a';

//JavaScript dinâmico
var i = 0;
var c = 'a'

Bom se perguntar se sua linguagem é estática ou dinâmica

>>>>>>>Forte x Fraca<<<<<<<
Os dados tem tipos?

função tamanho(texto)

#Python Forte
s = "Olá, mundo"
s = 3
print(tamanho(s)) #erro, programa morre

#JavaScript - Fraco

var s = "Olá, mundo"
s = 3
console.log(tamanho(s))//undefined
var s = 3* (true + "Olá mundo")//Not a number

Assembly

Somente numeros, não tem dados, você que precisa interpretar o dado, linguagem extremamente fraca

C: linguagem relativamente mais fraca, ex.:
char *c; // versoes mais novas não conseguem fazer isso
int i = 0;
i *= c;

Linguagens fracas e dinâmicas: em geral, são difíceis de manter o código, tela da web aparecendo undefined. Ex.: undefined + number, NaN + string.

--------Compilado vs Interpretado-----------

Codigo fonte

Temos duas opções, jogar ele num compilador(programa de computador - binário, todo programa no seu computador é binário, vai ler o texto e gerar outro programa, assembly gerado pelo computador. Pode compilar para várias arquiteturas.

Interpretado: existe um programa, geralmente escrito em outra linguagem, ex.: C. Coloca o código no interpretador e já gera um código. Python é assim Java também.

Técnica Bootstrap: você quer fazer uma linguagem, ex.:
Javaehruim, faço compilador do Javaehruim, escrito em Javaehruim, como faço para rodar? Finjo que sou um compilador, coloco o código no compilador, pra depois criar um Javaehruim Compiler em ASSEMBLY.

Diferença entre as duas:
- Pra rodar python, precisa de um interpretador de python, desvantagem, precisa mandar o interpretador certo. Um compilador para cada linguagem ser convertido para cada alvo. Problema para embarcado: C tem muitos compiladores, pois existem vários embarcados.
Compilador de C para assembly da sua placa ao utilizar embarcados, Circuitos integrados.
Código em C++, deixar versões para MAC, Windows, disponíveis para download.

- Java

BDO, engenharia e TEF: TEF trabalha bastante com embarcados.


>>>>>>>>>>>>>>>>>>>JIT<<<<<<<<<<<<<<<<<<<<<<<<
JUST IN TIME

Diferença entre java linguagem e java o ambiente.
Temos três targets diferentes: linux, x64, apple
Três linguagens: Java, Kotlin e Scala. São três linguagens do mesmo ecossitesma, compilam para cada um dos meus targets, ou seja, são 9 compiladores.
A ideia do Java, é criar, um compilador intermediário IL, muitas vezes um bite code, próximo ao assembly, todas as linguagens convertem para a IL, e tem um programinha para converter para meu target(máquinas). Objetivo: não ter que fazer o meu projeto toda vez.
As 3 linguagens são intercambiaveis, elas viram a mesma coisa, Ex.: C# e Java, Visual Basic e Kotlin(Kotlin + pra mobile), F# e Scala.

C++ tem iniciativas assim, muito utilizado.

Ao invés de pegar o IL para converter para diversas formas, vou fazer um interpretador em binário. Cada plataforma tem um interpretador.
A maioria dos .exe são em linguagem de máquina. IL na verdade converte em tempo de execução para assembly, enquanto seu código tá executando, está transformando em assembly, e já percebe alterações específicas. Assembly gerado é salvo em CACHE.

Segunda vez que roda o programa em Java é mais rápido, porque já tem o assembly feito quando rodamos pela primeira vez.

Ganho de desempenho, de complexidade. único defeito é ter a máquina virtual instalada no seu computador, se não não roda.

Preciso do JDK e do JVM. JDK é pra codar, desenvolvedor só que precisa de JDK, mas instala os dois pra testar, linguagem para IL. 
JVM: programinha para rodar, convertendo assembly.

Mais fácil de descompilar, ou seja, volta ao código original, código fonte.

>>>>>>>>>>>>Stack & Heap<<<<<<<<<<<<<<<<<<<

Forma como muitas linguagens gerenciam a memória e os dados.
Stack: memória organizada em pilha, os últimos dados a entrarem, são os primeiros que saem,

Heap: aloca espaço dentro dela, aloca toda vez que você chama, operação mais lenta, bom pra dados que não tem noção do tamanho, mas consegue aumentar e diminuir, porém, mais lento.

X86
Stack & Heap, ficam dentro da memória

Stack: coloca um em cima do outro, dados em ordem, e sempre que eu tiro, eu tiro o primeiro da pilha, conforme o que eu vou usando

Heap: vou colocando os dados, ótimo para quando não sei o tamanho, quando não sei o que são os meus dados, é ótimo.

void main()
{
	int i = 0;
	i = get3();
}

int get3()
{
	int n = 3;
	return n;
}

Stack: main, i = 0, linha 4, return n, aí limpa tudo o que está na stack, e coloca na stack o 3 que tinha retornado, i = 3, conforme você entra na função, aumenta o stack, conforme retorna, apaga os dados, e só armazena os valores que tem um tamanho específico e determinado.

string s = "alo";
o que vai pro stack é o endereço da memória onde o dado está.

Pc de 64 bits = endereço do ponteiro tem 64 bits.
char *  ponteiro é uma variável de 64 bits que está na stack, e o valor, como é desconhecido o tamanho está no heap.

Vantagens stack: acesso há stack é muito mais rápido, pra colocar, tirar, etc, processamento mais

Vantagens heap:

int, char e float dentro de funções, dentro da stack

classes e strings vão estar no heap

Desvantagem do heap: problema de desalocação. Precisa utilizar os registradores para sinalizar que o espaço está livre para ser alocado para outra coisa.Grande problema: quando? Como você sabe exatamente onde ele está? e depois, aquele espaço fica lá? QUEM FAZ A DESACOLAÇÃO É O GARBAGE COLLECTOR, GASTO DE PROCESSAMENTO, UTILIZAÇÃO DE VÁRIAS THREAD, PC MAIS LENTO

X = 3, o 3 está no heap, e o x na stack como ponteiro.

Análise de Escape: consegue saber quando um dado vai sair da função, identifica quando um dado não vai pro heap e sim pra stack.

Em geral, stack e heap estão no mesmo lugar, stackoverflow, stack enntrou dentro do heap e causou esse problema. Causa: função rescursiva muito longa, ocupa um grande espaço, loops infinitos.

>>>>>>>>>Garbage Colector<<<<<<<<<<<

Uma das formas de você liberar memória.
Bem utilizada no processamento multi core.

Vigiar os meus ponteiros para um dado, você pode ter mais de um ponteiro, verifica se você tá usando um dado, se não, ele tá limpando.
Em tempos em tempos ele checa pra ver se tem algum dado que não está sendo usado para limpar ele, lembrando que isso usa recursos, ou seja, desempenho.
Dados gerenciados estão na heap, e estão em proteção do Garbage Collector.

Garbage Collector: prioriza dados que foram usado em processamento curto, do que outros tipos de dados, ele é da linguagem. Linguagens interpretadas: o interpretador pode ter um garbage collector.

Linguagens compiladas: podem ter garbage collector desde que sejam criadas no executável.

Respondendo a pergunta do depois do Stack

C não usa garbage collector.

Sistema operacional também tem garbage collector: gerenciamento normal do sistema, mata algum programa que não está sendo utilizado, só não consegue achar partes pequenas de um programa.

Ex.:
aloquei os dados, e um deles não está sendo mais utilizado, então ele é limpado da memória, sobrou um espaço, denominado de Fragmentação, nome do buraquinho sem nada, se eu juntar um espaço que sobrou com o outro que sobrou eu poderia colocar um dado ali, mas não posso colocar, pois precisa ser contínuo, vai dar OUT OF MEMORY.

Java reorganiza a memória, defragmentação, move partes vazias para outro espaço, algo bem pesado, pois muda o endereço dos ponteiros da stack em uma thread, e em outra thread o programa roda normal. 

Cuidado ao colocar muita pressão no HEAP.

Se fosse uma IA de xadrez, irá criar várias instâncias do tabuleiro pra fazer uma análise, colocando tudo isso na memória, volta e meia vai se livrar de alguns deles e criar vários outros, aumentando a fragmentação, depende muito de desempenho, se fizer errado, desempenho vai com deus.