Exception e RuntimeException

No java faz muita diferença as duas, checked exception, qualquer classe que herde um erro de exception é um checked exception.
é obrigado a tratá-la. Exeção meio que lógica, você fez algo que estoura erro no seu código.

As classes que herdem de RuntimeException pode estourar erro, algo inesperado, Unchecked exception.

Usuario não tem permissão: aparece na tela que ele não tem acesso, isso é Checked exception.
Usuario deletou uma pasta que não deveria ter deletado, Unchecked exception. 

Exception -> Checked, não permite que rode a função. São verificadas em tempo de compilação. Duas infromações importantes:
a mensagem e a StackTrace. StackTrace: pilha de dados em que aparece a linha onde está o erro, e que a exceção passou. 

RuntimeException -> Unchecked

Super: chmar o construtor da classe mãe, mandando infromação para ele.

RuntimeException - super, não chamo o erro, só coloco a mensagem que eu quero, pode passar a causa ou não.

throw é o rise do python, função B só estoura erro. Try, se falhar vai para o catch, podendo ter vários catch para filtrar vários
tipos de erro.

Java prefere que você estoure erros cedo e um try catch o mais tarde possível.

Pra que ter o finally: ele executa mesmo que o catch retorne, o finally é sempre executado, independente do que acontece antes dele.
O que está debaixo do finally se estourar um erro não vai rodar.

Quando uma função pode estourar uma Checked Exception o java vai dizer erro, você não pode exceutar, só executa se tiver um 
trhows MyException para falar: eu posso estourar uma exceção checked e quem for me usar tem a responsa de tratar o erro.

No main tem que ter um try catch para tratar o erro, se não não consigo fazer nada.

import java.lang.Exception;
import java.lang.RuntimeException;

class Main
{
    public static void main(String[] args)
    {
        try
        {
            funcA();
        }
        catch (RuntimeException e)
        {
            System.out.println("Runtime Exception!!");
        }
        catch (Exception e)
        {
            e.printStackTrace();  
        }

        System.out.println("Olá!");
    }

    static void funcA()
        throws MyException
    {
        try
        {
            funcB();
        }
        catch (MyRuntimeException e)
        {
            throw new MyException(e);
        }
        catch (Exception e)
        {
             throw e;   
        }
        finally
        {
            System.out.println("Liberando recursos...");
        }
    }

    static void funcB()
    {
        throw new MyRuntimeException();
    }
}


























